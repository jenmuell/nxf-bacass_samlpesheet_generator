// header of the nextflow pipeline
manifest {
    author = 'Jennifer Mueller, jennifermuller56@gmail.com'
    name = 'nxf-bacass_samplesheet_generator'
    description = 'Samplesheet Generator for the Bacterial hybrid assembly pipeline (nf-core/bacass) and Unicyler + PlasmIDent pipeline'
    homePage = ''
    nextflowVersion = '>=21.04.0'
}

// Global default params TODO: change all to null 
params {
    
    // Input options
    pipeline                = 'bacass'                                             // choice between: (nf-core/)bacass (default), unicycler, plasmIDent
    reads                   = 'short'                                             // choice between: short (default), long, hybrid
    mapping_file            = null                                              // path to mapping file, containing the unique IDs of the Illumina and Nanopore reads
    outdir                  = "results-samplesheet_generator"                 // output directory for results
    multiqc_config          = "multiqc_config.yml"

    // Illumina options
    int_reads_input         = null                                              // path to Illumina reads

    // Nanopore options
    ont_reads_input         = null                                              // path to Nanopore read folder (barcodeXX) 
    ont_reads_outdir        = null                                              // path to processed Nanopore reads
    ont_reads_ids           = null                                              // comma separated list of barcode numbers (barcodeXX)                                   

    // bacass/viralrecon options
    samplesheet_header      = 'ID,R1,R2,LongFastQ,Fast5,GenomeSize'             // default for nf-core pipeline, unicycler without header      
    genomesize              =  null                                             // expected size of the reference genome   

    // plasmIDent options
    plas_assemblies         = null                                              // path to assemblies; if null search for sample ID folder
    plas_outdir             = "results-plasmident"

}


report {
    enabled = true
    file = "${params.outdir}/nextflow-run-report.html"
}


profiles {
	test {
			params.runfolder = 's3://illumina-bcl/testdata'
	}

    docker {
            docker.enabled          = true
            process.container       = 'jenmuell/bacass_samplesheet_generator:latest'

            singularity.enabled     = false
            podman.enabled          = false
            shifter.enabled         = false
            charliecloud.enabled    = false
    }
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    // R_PROFILE_USER   = "/.Rprofile"   // for R libraries
    // R_ENVIRON_USER   = "/.Renviron"
}

conda.cacheDir = '/home/jennifer/anaconda3/envs'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}